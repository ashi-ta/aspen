#!/usr/bin/env python3
# encoding: utf-8
"""Identity transformation to generate `sounds` signal itself"""

from typing import Sequence

import numpy as np

from aspen.interfaces.abs_common_interface import AbsCommonInterface
from aspen.interfaces.abs_stimulus_interface import AbsStimulusInterface
from aspen.utils.cli_utils import strtobool


class Identity(AbsCommonInterface, AbsStimulusInterface):
    """Identity transformation to generate `sounds` signal itself.

    Args:
        binaural: The flag to consider inputs as binaural stimulus.
            1st & 2nd inputs are left & right channels, respectively. Defaults to False.
    """

    def __init__(self, binaural: bool = False):
        self.binaural = binaural

    @staticmethod
    def add_arguments(parser):
        group = parser.add_argument_group("Identity setting")
        group.add_argument(
            "--binaural",
            default=False,
            type=strtobool,
            help="The flag to consider inputs as binaural stimulus."
            "1st & 2nd inputs are left & right channels, respectively",
        )
        return parser

    def __call__(self, x: Sequence[np.ndarray]) -> np.ndarray:
        """Identity transformation to generate `sounds` signal itself.

        Args:
            x: noise or tone generated by `sounds` module.
                x must be sequence-like object such as list, tuple and so on.

        Returns:
            Stimulus that is generated by `sounds` module.
        """

        if len(x) != 1 and not self.binaural:
            raise ValueError("input length must be 1, but got {}".format(len(x)))

        if self.binaural:
            if len(x) != 2:
                raise ValueError("input length must be 2, but got {}".format(len(x)))
            stimulus = np.stack([x[0], x[1]], axis=1)
        else:
            stimulus = x[0]

        return stimulus
